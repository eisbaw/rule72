feat: implement Policy Engine Service with intelligent rule evaluation

Complete implementation of PowerChronicle Policy Engine Service (Issue #002):

Core Features:
- Rule definition framework with priority-based execution (1-20 scale)
- Historical event analysis with sliding window conditions
- Complex condition evaluation (duration, stability, time windows)
- 17 default rules covering critical, display, standard, network scenarios
- Structured policy decision logging to /var/log/power-decisions.jsonl

Architecture:
- Clean separation: policy evaluation only, no hardware interaction
- Event log consumption pipeline with caching for performance
- Independent service with SystemD integration and resource limits
- Rule priority system prevents conflicts and ensures critical safety

Default Rules Implemented:
- Critical: Battery emergency, AC cancel, high load prevention
- Display: Brightness reduction, DPMS control, monitor awareness
- Standard: Normal sleep, extended hibernate, WiFi power saving
- Network: Connection-aware suspend, activity prevention
- Notifications: Battery warnings, idle alerts, inhibitor status

Testing & Validation:
- 19 comprehensive unit tests covering all components
- QEMU integration tests with mock hardware simulation
- Performance validation (memory <50MB, CPU <10%)
- Resource limits and error recovery testing

Implementation delivers complete policy evaluation capability for
intelligent laptop power management with full audit trail.

ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>

