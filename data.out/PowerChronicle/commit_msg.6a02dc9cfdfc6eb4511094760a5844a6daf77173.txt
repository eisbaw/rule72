feat: implement Action Executor Service with comprehensive system control

Complete implementation of PowerChronicle Action Executor Service (Issue
#003):

Core Action Execution Framework:
- Policy decision consumption pipeline with real-time processing
- Action queuing system with configurable delays and cancellation
- Multi-threaded architecture (executor + monitor loops)
- Comprehensive error handling and rollback mechanisms
- Safety mechanisms with inhibitor checking and dry-run mode

Action Types Implemented:
- Power Actions: suspend, hibernate, shutdown via systemctl
- Display Actions: brightness control, DPMS screen on/off
- System Actions: screen lock, WiFi enable/disable, user notifications
- Meta Actions: cancel_sleep for immediate action cancellation
- Logging Actions: warning messages and structured audit trail

Advanced Features:
- Action delays with countdown and cancellation capability
- Priority-based action replacement for non-repeatable rules
- Real-time cancellation based on state changes and user activity
- Comprehensive action result logging (/var/log/power-actions.jsonl)
- Multiple fallback methods for each action type

SystemD Service Integration:
- Resource limits (20MB memory, 5% CPU quota)
- Required capabilities for system control operations
- Helper utilities: power-actions, power-action-debug
- Log rotation and security hardening
- Service dependency management

Testing & Validation:
- 25 comprehensive unit tests (100% pass rate)
- QEMU integration tests with end-to-end action pipeline
- Mock system interface testing with subprocess mocking
- Action timing, cancellation, and error handling validation
- Resource usage and performance verification

The Action Executor completes the core PowerChronicle service
architecture: Event Chronicle â†’ Policy Engine â†’ Action Executor,
providing reliable system action execution with full audit trails.

ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>

